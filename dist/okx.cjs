"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const e=require("./index-Dfqe4I64.cjs"),K=require("bitcoinjs-lib"),l=require("./BrowserWalletSigningError-CXaOQVy_.cjs"),W=require("./utils-BCPFyPtI.cjs");function d(){if(typeof window>"u")throw new e.OrditSDKError("Cannot call this function outside a browser");return typeof window.okxwallet<"u"}function f(n="mainnet"){if(!d())throw new e.BrowserWalletNotInstalledError("OKX Wallet not installed");let r;switch(n){case"mainnet":r=window.okxwallet.bitcoin;break;case"testnet":r=window.okxwallet.bitcoinTestnet;break;case"signet":r=window.okxwallet.bitcoinSignet;break;default:throw new e.OrditSDKError("Invalid network")}if(!r)throw new e.OrditSDKError("Failed to get OKX Wallet provider");return r}async function m(n="mainnet"){if(!d())throw new e.BrowserWalletNotInstalledError("OKX Wallet not installed");const r=f(n);try{const{address:t,publicKey:s}=await r.connect(),o=e.getAddressFormat(t,n),i=W.fromXOnlyToFullPubkey(s);if(!t||!i||!o)throw new e.OrditSDKError("Failed to get addresses from OKX Wallet");return[{publicKey:i,address:t,format:o}]}catch(t){if(t instanceof e.OrditSDKError)throw t;const s=t;throw s.code===4001?new l.BrowserWalletRequestCancelledByUserError:new e.OrditSDKError(s.message)}}async function y(n,{finalize:r=!0,extractTx:t=!0,network:s,inputsToSign:o}={network:"mainnet",inputsToSign:[]}){if(!d())throw new e.BrowserWalletNotInstalledError("OKX Wallet not installed");if(t&&!r)throw new e.BrowserWalletExtractTxFromNonFinalizedPsbtError;const i=f(s),w=n.toHex();let g="";const h=[];o.forEach(a=>{const{address:c,signingIndexes:E,sigHash:b}=a;E.forEach(x=>{h.push({index:x,address:c,sighashTypes:b?[b]:void 0})})});try{g=await i.signPsbt(w,{autoFinalized:r,toSignInputs:h})}catch(a){const c=a;throw c.code===4001?new l.BrowserWalletRequestCancelledByUserError:new e.OrditSDKError(c.message)}if(!g)throw new l.BrowserWalletSigningError("Failed to sign psbt hex using OKX Wallet");const u=K.Psbt.fromHex(g);if(t)try{return{base64:null,hex:u.extractTransaction().toHex()}}catch(a){throw a instanceof Error&&a.message==="Not finalized"?new e.BrowserWalletExtractTxFromNonFinalizedPsbtError:new e.OrditSDKError("Failed to extract transaction from PSBT")}else return{base64:u.toBase64(),hex:u.toHex()}}async function O(n,r="ecdsa",t="mainnet"){if(!d())throw new e.BrowserWalletNotInstalledError("OKX Wallet not installed");const s=f(t);let o="";try{o=await s.signMessage(n,r)}catch(i){const w=i;throw w.code===4001?new l.BrowserWalletRequestCancelledByUserError:new e.OrditSDKError(w.message)}if(!o)throw new l.BrowserWalletSigningError("Failed to sign message using OKX Wallet");return{base64:o,hex:e.Buffer.from(o,"base64").toString("hex")}}exports.getAddresses=m;exports.isInstalled=d;exports.signMessage=O;exports.signPsbt=y;
